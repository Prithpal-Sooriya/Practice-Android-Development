Additional research:
  https://developer.android.com/guide/topics/ui/menus.html

Menus

  Option menu and action bars:
    This is what we just covered
      Action bar contains items
      Action bar also contains an overflow menu
        which contains other items that don't fit onto the screen

  Context menu and contextual actions mode
    Context menu = floating menu that appears when a user makes a long click on an element
      basically a right-click to allow other options instead of copy and paste
    Contextual actions mode = displays action items...
      ... that affect selected content in a bar at the top of the screen
      Also allows the user to select multiple items

  Popup menu
    Displays a list of items in a vertical list
      List is anchored to the view that invoked the menu
    It is good for providing an overflow of actions that relate to a specific content
      Or even to provide options for a second part of a command
        (e.g. sub list of options inside an element in a list)
    Actions in popup menu should NOT directly affect the corresponding content (contextual actions are supposed to do this)
      Instead is used for extended actions that relate to regions of content in activity
====================================
Defining a menu in XML
  All menus need to be placed into a menu folder in the res
    res --> menus --> yourMenu.xml ...

  Menu resource is good practice for a few reasons:
    It is easier to visualise menu structure in XML
    It separates content for the menu from you applications behavioural code
    It allows you to create alternative menu configurations for different:
      platform versions
      screen sizes
      other configurations by leveraging the App Resources framework

  To define a menu in XML, just state:
    <menu>
      This defines a menu, which is a contains for menu items
      A <Menu> element must be the root node for the file
      It can hold 1 or more <item> and <group> elements
    </menu>

    <item>
      Creates a menu MenuItem, which represents a single item in the menu.
      This element may contain nested <menu> element in order to create a submenu
    </item>

    <group>
      An optional, invisible container for <item> elements
      Allows you to categorise menu items so they share properties such as:
        active state
        visibility
    </group>

  Example code for game menu:
  <menu xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:id="@+id/new_game"
          android:icon="@drawable/ic_new_game"
          android:title="@string/new_game"
          android:showAsAction="ifRoom"/>
    <item android:id="@+id/help"
          android:icon="@drawable/ic_help"
          android:title="@string/help" />
  </menu>

  android:id = the id that the Java/backend will use to find this component
  android:icon = drawable/image for the items image
  android:title = text for that the item will actually display
  android:showAsAction = specifies when and how this item should appear as an action item in the action bar
    for example: show in action bar or only show in overflow menu

  Example code to add a sub menu:
  <menu xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:id="@+id/file"
          android:title="@string/file" >
        <!-- "file" submenu -->
        <menu>
            <item android:id="@+id/create_new"
                  android:title="@string/create_new" />
            <item android:id="@+id/open"
                  android:title="@string/open" />
        </menu>
    </item>
  </menu>

  To use the menu in activity
    Need to inflate the menu resource (convert XML into programmable object)
      This is done by using MenuInfater.inflate()
=========================================
Creating an options menu
  Where you should include actions and other options
    options must be relevant to current context of activity
    e.g.
      search
      compose email
      settings

  API level 10 or lower
    options menu will appear at the bottom of the screen when menu button pressed
      Can only hold up to 6 menu items on screen
      Need to press "more" to view more options

  API level 11 or higher
    options are available at the top in the app bar
    can show
      app name
      app icon
      search
      etc

    If all the items don't fit on screen they can be places into a list inside the 3 dots
      This is called the overflow menu

  You can declare items in subclass of activity/fragment
    if they both declare items in options menu (they are combined in the UI)
  Activity items appear first, then the fragments
    you can re-order menu items, in XML, with the:
      android:orderInCategory in <item>

  To specify options menu for activity, override onCreateOptionsMenu()
    Fragments have their own onCreateOptionsMenu() callback
  In this method, you can inflate own menu resource (defined by XML you created)
    place it into the Menu provided in the callback
  Example:
  @Override
  public boolean onCreateOptionsMenu(Menu menu)
    MenuInflater inflater = getMenuInflater(); //get the infater to inflate menu
    //inflate your XML menu created
    //also it places the programmable menu object (from the XML) into the menu variable
    infalter.inflate(R.menu.game_menu, menu);

  you can also add menu items using add() and retrieve them using findItem()
    great if you want to change properties of the predefined menu

Handle click events
  When user selects an item from the options menu (including action items in action bar)
  System calls activities onOptionItemSelected() method
    This method passes the MenuItem selected
  You can identify the item by using getItemId(), which returns the unique id for the menu item
    id is defined by android:id attribue in menu resource
      or defined by an integer given to add() method

  You can match this id to id's you know of all the other items

  Example code:
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
      //handle item with a selection
      switch (item.getItemId()) {
        case R.id.new_game:
          newGame();
          return true;
        case R.id.help:
          showHelp();
          return true;
        default:
          return super.onOptionsItemSelected(item);
      }
    }

  You should test each of the items to check if item is found
    When item is found, should end by returning true
  If you don't handle menu item, should call superclass implementation of method
    default implementation returns false

  If your activity includes fragments
    the system first calls onOptionsItemSelected()
    then for each fragment (in the order each frag0ment was added)
      This is repeated until one returns true or all fragments have been called

Changing menu items at runtime
  After system calls onCreateOptionsMenu(), it retains an instance of Menu that was populated
    Will not call this method again unless the activity/fragment was destroyed
  You should only call onCreateOptionsMenu() to create initial menu
    NOT called to make changes to menu during activity lifecycle

  If you want to modify options menu during activity lifecycle use the onPrepareOptionsMenu()
    This method passes you the Menu object as it currently exists
    Can modify the menu passed (add, remove, disable items)
    Fragments also supply onPrepareOptionsMenu() callback

    Android 2.3.x/API level 10 and lower
      System calls onPrepareOptionsMenu() each time user opens options menu (presses Menu button)

    Android 3.0/API level 11 and higher
      Options menu is considered to always be open when menu items are present in app bar
      When event occurs and want to perform a menu update:
        must call invalidateOptionsMenu() to request system call onPrepareOptionsMenu()
=========================================================
Creating Contextual menus
  Offers actions that affect specific item or context frame in UI
  Also provide context menu for any view
    But most often used in a ListView, GridView or other view collections which user can perform direct actions on each item

  2 types of contextual actions
    Floating context menu = menu that appears as a floating list of menus
      Occurs when the user does a long click on a view that declares support for a context menu
      Users can perform contextual action on one item at a time

    Contextual action mode = system implementation of ActionMode
      Displays a contextual action bar at the top of the screen with action items that affect the selected items
      Allows user to perform same action on multiple items at the same time

  Creating a floating context menu
    1) Register the View (of which the context menu should be associated with)
        By calling registerForContextMenu() and pass it the view

    If activity uses ListView/GridView and want each item to provide same context menu
      Register all items for context menu by passing ListView/GridView to registerForContextMenu()

    2) Implement the onCreateContextMenu() method in Activity/Fragment

    When the registered view recieves a long click, system calls onCreateContextMenu() method
      This is where you define the menu items
        Usually done by inflating menu resource
    Example:
    @Override
    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
      super.onCreateContextMenu(menu, v, menuInfo);
      MenuInflater inflater = getMenuInflater();
      inflater.inflate(R.menu.context_menu, menu);
    }
    MenuInflater allows you to inflate the context menu from menu resource.
    The callback method parameters include:
      The View that the user selected and context menu
      ContextMenu.ContextMenuInfo object that provides additional information about item selected
        If activity has several views that each provide a different context menu
          You might use these parameters to determine which context menu to inflate.

    3) Implement onContextItemSelected()

    When user selects a menu item, the system calls this method
      So you can now perform the appropriate action.
    Example:
    @Override
    public boolean onContextItemSelected(MenuItem item) {
      AdapterContextMenuInfo info = (AdapterContextMenuInfo) item.getMenuInfo();
      switch (item.getItemId()) {
        case R.id.edit:
          editNote(info.id);
          return true;
        case R.id.delete:
          deleteNote(info.id);
          return true;
        default:
          return super.onContextItemSelected(item);
      }
    }
    getItemId() method queries the ID for the selected menu item
      You should assign an ID to all menu items in XML using android: id attribute
    When successfully handle a menu item, return true.
    If you don't handle the menu item, pass the menu item to the superclass implementation
      As shown above
    If your activity includes fragments, the activity receives this callback first
      By calling superclass when unhandled, the system passes the method onto each fragment in turn until final boolean value given
        True if a menu item was found
        False if a menu item was not found

Using the contextual action mode
